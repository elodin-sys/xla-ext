name: Release
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
env:
  BAZEL_VER: "7.4.1"

jobs:
  create_draft_release:
    if: github.ref_type == 'tag' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Create draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! gh release list | grep -q ${{ github.ref_name }}; then
            gh release create --title ${{ github.ref_name }} --draft ${{ github.ref_name }}
          fi

  linux:
    name: "x86_64-linux-gnu-{cpu,tpu}"
    needs: [create_draft_release]
    permissions:
      contents: write
    # We intentionally build on ubuntu 20 to compile against
    # an older version of glibc
    runs-on: ubuntu-24.04
    steps:
      - name: Install libtool-bin
        run: |
          sudo apt-get update && sudo apt-get install -y libtool-bin llvm
      - uses: actions/checkout@v4
      - uses: bazel-contrib/setup-bazel@0.14.0
        with:
          version: "${{ env.BAZEL_VER }}"
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archives
      - run: make
      - run: .github/scripts/upload.sh ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: cpu
          # CC: gcc-9

  macos:
    name: "aarch64-darwin-cpu (cross-compiled)"
    needs: [create_draft_release]
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: bazel-contrib/setup-bazel@0.14.0
        with:
          version: "${{ env.BAZEL_VER }}"
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archive
      - run: make
      - run: .github/scripts/upload.sh ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: cpu
          XLA_TARGET_PLATFORM: "aarch64-darwin"
          # Explicitly cross-compile for arm64
          BUILD_FLAGS: "--config=macos_arm64"
          # CC: gcc-9

  linux_cuda:
    # Currently the build takes longer than the job time limit (6h),
    # so we always build these off-CI
    name: "x86_64-linux-gnu-${{ matrix.xla_target }}"
    permissions:
      contents: write
    needs: [create_draft_release]
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - container: nvidia/cuda:13.0.1-cudnn-devel-ubuntu24.04
            xla_target: cuda130
            cuda_version: "13.0.1"
            cuda_version_short: "13.0"
            cudnn_version: "9.13.0"
            python: "3.11"
            cudnn_long_version: "9.13.0"
    container: ${{ matrix.container }}
    env:
      # Set the missing UTF-8 locale, otherwise Elixir warns
      LC_ALL: C.UTF-8
      # Make sure installing packages (like tzdata) doesn't prompt for configuration
      DEBIAN_FRONTEND: noninteractive
      ImageOS: "ubuntu24"
    steps:
      # The base images are minimalistic, so we bring a few necessary system packages
      - name: Install system packages
        run: |
          # We need to install "add-apt-repository" first
          apt-get update && apt-get install -y software-properties-common
          # Add repository with the latest git version for action/checkout to properly clone the repo
          add-apt-repository ppa:git-core/ppa
          # We run as root, so sudo is not necessary per se, but some actions (like setup-bazel) make use of it
          apt-get update && apt-get install -y ca-certificates curl git sudo unzip wget libtool-bin llvm
          # Install GitHub CLI used by our scripts
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt-get update && apt-get install -y gh
          # Install a specific cuDNN version over the default one
          cuda_version="${{ matrix.cuda_version }}"
          cudnn_version="${{ matrix.cudnn_version }}"
          cuda_version_short="${{ matrix.cuda_version_short }}"
          cudnn_long_version="${{matrix.cudnn_long_version}}"
          wget "https://developer.download.nvidia.com/compute/redist/cudnn/v${cudnn_version}/local_installers/${cuda_version_short}/cudnn-local-repo-ubuntu2204-${cudnn_long_version}_1.0-1_amd64.deb"
          dpkg -i "cudnn-local-repo-ubuntu2204-${cudnn_long_version}_1.0-1_amd64.deb"
          cp /var/cudnn-local-repo-ubuntu2204-${cudnn_long_version}/*.gpg /usr/share/keyrings/
          apt-get update
          apt-get install -y --allow-downgrades --allow-change-held-packages libcudnn8-dev libcudnn8
      # Prevent git from checking the repository owner and erroring with "dubious ownership"
      - run: git config --global --add safe.directory '*'
      # Proceed with the regular steps
      - uses: actions/checkout@v4
      - uses: bazel-contrib/setup-bazel@0.14.0
        with:
          version: "${{ env.BAZEL_VER }}"
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
        env:
          # Avoid permission errors for /github/home, in this case the directory
          # is used for pip cache and is not relevant either way
          HOME: /root
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archive
      - run: make
      - run: .github/scripts/upload.sh ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: ${{ matrix.xla_target }}

  linux_arm:
    name: "aarch64-linux-gnu-cpu"
    needs: [create_draft_release]
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    steps:
      - name: Install libtool-bin
        run: |
          sudo apt-get update && sudo apt-get install -y libtool-bin llvm
      - uses: actions/checkout@v4
      - uses: bazel-contrib/setup-bazel@0.14.0
        with:
          version: "${{ env.BAZEL_VER }}"
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archives
      - run: make
      - run: .github/scripts/upload.sh ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: cpu
          # CC: gcc-9
