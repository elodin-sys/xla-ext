#
# Common (Linux + macOS)
#
build --noenable_bzlmod
build --config=short_logs

# Reduce noisy warnings across the tree
build --copt=-Wno-sign-compare
build --copt=-Wno-error=unused-command-line-argument
build --copt=-Wno-c23-extensions

# Use pywrap (matches upstream defaults)
build --repo_env=RULES_PYTHON_ENABLE_PYSTAR=0
build --repo_env=PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=upb
build --action_env=PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=upb
build --action_env=PYTHON_CFLAGS=
build --action_env=PYTHON_LDFLAGS=
build --repo_env=PYTHON_CFLAGS=
build --repo_env=PYTHON_LDFLAGS=
build --action_env=PYTHON_INCLUDE=
build --repo_env=PYTHON_INCLUDE=
build --action_env=PYTHON_LIB=
build --repo_env=PYTHON_LIB=
build --action_env=PYTHON_LIBRARY=
build --repo_env=PYTHON_LIBRARY=
build --action_env=PYTHON_SITE_PACKAGES=
build --repo_env=PYTHON_SITE_PACKAGES=

# Keep actions hermetic wrt env (weâ€™ll explicitly pass the few we want)
build --incompatible_strict_action_env
build --action_env=HOME
# Clear/neutralize problematic inherited flags
build --action_env=CFLAGS=
build --action_env=CPPFLAGS=
build --action_env=CPATH=
build --action_env=C_INCLUDE_PATH=
build --action_env=CPLUS_INCLUDE_PATH=
build --action_env=NIX_CFLAGS_COMPILE=
build --action_env=NIX_LDFLAGS=
build --copt=-Wno-unused-command-line-argument

#
# macOS profile (Apple Silicon)
#

build:macos --repo_env=USE_HERMETIC_CC_TOOLCHAIN=0
build:macos --incompatible_enable_cc_toolchain_resolution
build:macos --macos_cpus=arm64

# Prefer the Apple toolchain & platforms
build:macos --apple_platform_type=macos
build:macos --cpu=darwin_arm64
build:macos --host_cpu=darwin_arm64
build:macos --platforms=@build_bazel_apple_support//platforms:darwin_arm64
build:macos --host_platform=@build_bazel_apple_support//platforms:darwin_arm64

# Pin Apple toolchain by redirecting @local_config_apple_cc to our local stub.
build:macos --crosstool_top=@local_config_apple_cc//:toolchain
build:macos --apple_crosstool_top=@local_config_apple_cc//:toolchain
build:macos --host_crosstool_top=@local_config_apple_cc//:toolchain

# Force Apple toolchain selection (toolchain resolution path)
build:macos --incompatible_enable_cc_toolchain_resolution
build:macos --extra_toolchains=@local_config_apple_cc//:all
build:macos --extra_execution_platforms=@local_config_platform//:host

# Plumb through the Apple developer env (values come from the outside)
# build:macos --action_env=SYSROOT
# build:macos --repo_env=SYSROOT
# build:macos --host_action_env=SYSROOT
build:macos --action_env=DEVELOPER_DIR
build:macos --repo_env=DEVELOPER_DIR
build:macos --host_action_env=DEVELOPER_DIR

# Disable Clang header modules; they cause strict module map errors with third_party deps (e.g., gRPC/Abseil).
build:macos --features=-header_modules
build:macos --features=-use_header_modules
build:macos --features=-module_maps

# Belt & suspenders: also tell Clang not to use modules at all.
build:macos --copt=-fno-modules
build:macos --cxxopt=-fno-modules
build:macos --host_copt=-fno-modules
build:macos --host_cxxopt=-fno-modules

# Ensure any accidental macOS x86_64 selection is mapped back to arm64
build:macos --platform_mappings=xla/extension/platform_mappings

#
# Linux profile
#
# On Linux we let @local_config_cc do its normal thing.
build:linux --cpu=k8
build:linux --host_cpu=k8
# If you need clang-only builds on Linux, uncomment:
# build:linux --compiler=clang
